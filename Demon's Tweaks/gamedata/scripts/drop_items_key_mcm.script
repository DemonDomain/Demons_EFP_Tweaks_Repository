local drop_key = DIK_keys.DIK_G
local modifier = 2
local mcm_id = "drop_item_key"
local mcm_keybinds = ui_mcm and ui_mcm.key_hold
local add_module = efp_ui_mcm.add_module_settings
local get_settings = efp_ui_mcm.get_module_settings

add_module(
    {
        id = mcm_id,
        sh = true,
        gr = {
            { id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_menu_" .. mcm_id, size = {512, 50}, spacing = 20},
            { id = "key_drop", hint = "svui_drop_item_key", type = "key_bind", val = 2, def = drop_key},
			{ id = "modifier", type = ui_mcm.kb_mod_radio, val = 2, def = 2, hint = "mcm_kb_modifier" , 
                content = { 
                    {1,"mcm_kb_mod_shift"} , 
                    {2,"mcm_kb_mod_ctrl"},
                    {3,"mcm_kb_mod_alt"}
                }
            },
        }
    }
)

function on_option_change(mcm)
    if mcm then
        drop_key = get_settings(mcm_id .. "/key_drop") or drop_key
		modifier = get_settings(mcm_id .. "/modifier") or modifier
    end
end

local allowed_bags = {
    ["actor_bag"] = true,
    ["actor_belt"] = true,
    ["actor_equ"] = true
}

function on_key_press(key)
    if key ~= drop_key then return end
    local instance = ui_inventory.GUI
	if not (instance and instance:IsShown()) then return end

	local hover = instance.hover
	local idx, bag = hover.idx, hover.bag
	local obj = idx and allowed_bags[bag] and instance.CC[bag]:GetObj(idx)
	if not obj then return end

	if instance:Item_On_Mode("drop", bag) and instance:Cond_NotQuest(obj, bag) then
        local ci = instance.CC[bag]:GetCell_ID(obj:id())
        local drop_all = ui_mcm.get_mod_key(modifier)
		instance[drop_all and ci.childs and "Action_Drop_All" or "Action_Drop"](instance, obj, bag)
		return
	end
end

function on_game_start()
	RegisterScriptCallback("on_option_change",on_option_change)
	RegisterScriptCallback("on_key_press",on_key_press)
	on_option_change(mcm_keybinds)
end