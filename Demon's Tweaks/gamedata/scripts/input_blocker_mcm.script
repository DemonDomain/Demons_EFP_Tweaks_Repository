local mcm_id = "input_blocker"
local add_module = efp_ui_mcm.add_module_settings
local get_settings = efp_ui_mcm.get_module_settings

local skip_input_keys = {
    [key_bindings.kACCEL] = true,
    [key_bindings.kCROUCH] = true
}

add_module(
    {
        id = mcm_id,
        sh = true,
        gr = {
            { id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_menu_" .. mcm_id, size = {512, 50}, spacing = 20},
            { id = "kACCEL", hint = "svui_input_blocker_kACCEL", val = 1, type = "check", def = true},
			{ id = "kCROUCH", hint = "svui_input_blocker_kCROUCH",val = 1, type = "check", def = true},
        }
    }
)

function skip_input()
    local instance = ui_inventory.GUI
    if instance.mode ~= "inventory" then return end

    CreateTimeEvent(mcm_id, "allow_movements", 0, function(sprint)
        if sprint then
            CreateTimeEvent(mcm_id, "re_enable_sprint", 0.01, function()
                level.press_action(bind_to_dik(7))
                return true
            end)
        end
        -- better be safe with time events
        local instance = ui_inventory.GUI
        if not instance then return true end
        instance:AllowMovement(instance.mode == "inventory")
        return true
    end, IsMoveState("mcSprint"))

    instance:AllowMovement(false)
    return true
end

function on_key_press(key)
	if not (ui_inventory.GUI and ui_inventory.GUI:IsShown()) then 
        return 
    end
    
    local bind = dik_to_bind(key)
    if skip_input_keys[bind] then
        skip_input()
    end
end

function on_option_change()
    if not ui_mcm then
        return
    end
    skip_input_keys = {
        [key_bindings.kACCEL] = get_settings(mcm_id .. "/kACCEL"),
        [key_bindings.kCROUCH] = get_settings(mcm_id .. "/kCROUCH")
    }
end

function on_game_start()
    RegisterScriptCallback("on_key_press",on_key_press)
    RegisterScriptCallback("on_option_change", on_option_change)
    on_option_change()
end